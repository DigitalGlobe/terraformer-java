package com.esri.terraformer;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.junit.BeforeClass;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

public class GeoJsonTest {
    static final String BAD_TYPE = "{\"type\":\"WubbaLubbaDingDong\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}";

    // Feature Collection strings
    static final String VALID_FEATURE_COLLECTION = "{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}]}";
    static final String EMPTY_FEATURES_FEATURE_COLLECTION = "{\"type\":\"FeatureCollection\",\"features\":[]}";
    static final String WRONG_TYPE_FEATURE_COLLECTION = "{\"type\":\"GeometryCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}]}";
    static final String NO_TYPE_FEATURE_COLLECTION = "{\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}]}";
    static final String NOT_AN_OBJECT_FEATURE_COLLECTION = "[\"type\",\"features\"]";
    // one of the linestrings has too few points
    static final String INVALID_INNER_TYPE_FEATURE_COLLECTION = "{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}]}";
    static final String NO_FEATURES_FEATURE_COLLECTION = "{\"type\":\"FeatureCollection\"}";
    static final String FEATURES_NOT_ARRAY_FEATURE_COLLECTION = "{\"type\":\"FeatureCollection\",\"features\":100.0}";

    // Feature strings
    static final String MULTILINESTRING_FEATURE = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}";
    static final String POLYGON_FEATURE = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}";
    static final String MULTIPOLYGON_FEATURE = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}";
    static final String GEOMETRYCOLLECTION_FEATURE = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}";
    static final String EMPTY_GEOMETRY_FEATURE = "{\"type\":\"Feature\",\"geometry\":{}}";
    static final String WRONG_TYPE_FEATURE = "{\"type\":\"GeometryCollection\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}";
    static final String NO_TYPE_FEATURE = "{\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}";
    static final String NOT_AN_OBJECT_FEATURE = "[\"type\",\"geometry\"]";
    // one of the linestrings inside the polygon, inside the geometry collection, is not a linear ring
    static final String INVALID_INNER_TYPE_FEATURE = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}]},\"properties\":{\"innerObject\":{\"herp\":\"derp\",\"nurp\":100.5},\"innerArray\":[1,2,3,4],\"horse\":\"hands\"}}";
    static final String NO_GEOMETRY_FEATURE = "{\"type\":\"Feature\"}";
    static final String GEOMETRY_NOT_OBJECT_FEATURE = "{\"type\":\"Feature\",\"geometry\":100.0}";
    static final String PROPERTIES_NOT_OBJECT_FEATURE = "{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},\"properties\":100}";

    // Geometry Collection strings
    static final String VALID_GEOMETRY_COLLECTION = "{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}]}";
    static final String EMPTY_GEOMETRIES_GEOMETRY_COLLECTION = "{\"type\":\"GeometryCollection\",\"geometries\":[]}";
    static final String WRONG_TYPE_GEOMETRY_COLLECTION = "{\"type\":\"MultiPolygon\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}";
    static final String NO_TYPE_GEOMETRY_COLLECTION = "{\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}";
    static final String NOT_AN_OBJECT_GEOMETRY_COLLECTION = "[\"type\",\"geometries\"]";
    // one of the linestrings inside the polygon is not a linear ring
    static final String INVALID_INNER_TYPE_GEOMETRY_COLLECTION = "{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]},{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]},{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}]}";
    static final String NO_GEOMETRIES_GEOMETRY_COLLECTION = "{\"type\":\"GeometryCollection\"}";
    static final String GEOMS_NOT_ARRAY_GEOMETRY_COLLECTION = "{\"type\":\"GeometryCollection\",\"geometries\":100.0}";

    // Multi Polygon strings
    static final String VALID_MULTI_POLYGON = "{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}";
    static final String EMPTY_COORDS_MULTI_POLYGON = "{\"type\":\"MultiPolygon\",\"coordinates\":[]}";
    static final String WRONG_TYPE_MULTI_POLYGON = "{\"type\":\"Polygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}";
    static final String NO_TYPE_MULTI_POLYGON = "{\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.0]]]]}";
    static final String NOT_AN_OBJECT_MULTI_POLYGON = "[\"type\",\"coordinates\"]";
    // one of the linestrings is not a linear ring
    static final String INVALID_INNER_TYPE_MULTI_POLYGON = "{\"type\":\"MultiPolygon\",\"coordinates\":[[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]],[[[95.0,0.0],[99.0,0.0],[99.0,4.0],[95.0,4.0],[95.0,0.0]],[[96.0,0.5],[98.0,0.5],[98.0,1.0],[96.0,1.0],[96.0,0.5]],[[96.0,3.0],[98.0,3.0],[98.0,3.5],[96.0,3.5],[96.0,3.1]]]]}";
    static final String NO_COORDINATES_MULTI_POLYGON = "{\"type\":\"MultiPolygon\"}";
    static final String COORDS_NOT_ARRAY_MULTI_POLYGON = "{\"type\":\"MultiPolygon\",\"coordinates\":100.0}";

    // Polygon strings
    static final String VALID_POLYGON = "{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]}";
    static final String EMPTY_COORDS_POLYGON = "{\"type\":\"Polygon\",\"coordinates\":[]}";
    static final String WRONG_TYPE_POLYGON = "{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]}";
    static final String NO_TYPE_POLYGON = "{\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0],[101.0,0.5]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]}";
    static final String NOT_AN_OBJECT_POLYGON = "[\"type\",\"coordinates\"]";
    // one of the linestrings is not a linear ring
    static final String INVALID_INNER_TYPE_POLYGON = "{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[104.0,0.0],[104.0,4.0],[100.0,4.0],[100.0,0.0]],[[101.0,0.5],[103.0,0.5],[103.0,1.0],[101.0,1.0]],[[101.0,3.0],[103.0,3.0],[103.0,3.5],[101.0,3.5],[101.0,3.0]]]}";
    static final String NO_COORDINATES_POLYGON = "{\"type\":\"Polygon\"}";
    static final String COORDS_NOT_ARRAY_POLYGON = "{\"type\":\"Polygon\",\"coordinates\":100.0}";

    // Multi Line String strings
    static final String VALID_MULTI_LINE_STRING = "{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[103.0,5.0],[109.0,3.0]]]}";
    static final String EMPTY_COORDS_MULTI_LINE_STRING = "{\"type\":\"MultiLineString\",\"coordinates\":[]}";
    static final String WRONG_TYPE_MULTI_LINE_STRING = "{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}";
    static final String NO_TYPE_MULTI_LINE_STRING = "{\"coordinates\":[[[100.0,0.0],[101.0,1.0]],[[100.0,0.0],[101.0,1.0]]]}";
    static final String NOT_AN_OBJECT_MULTI_LINE_STRING = "[\"type\",\"coordinates\"]";
    static final String INVALID_INNER_TYPE_MULTI_LINE_STRING = "{\"type\":\"MultiLineString\",\"coordinates\":[[[100.0,0.0],[101.0,\"squid\"]],[[100.0,0.0],[101.0,1.0]]]}";
    static final String NO_COORDINATES_MULTI_LINE_STRING = "{\"type\":\"MultiLineString\"}";
    static final String COORDS_NOT_ARRAY_MULTI_LINE_STRING = "{\"type\":\"MultiLineString\",\"coordinates\":\"horse\"}";

    // Line String strings
    static final String VALID_LINE_STRING = "{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}";
    static final String WRONG_TYPE_LINE_STRING = "{\"type\":\"MultiPoint\",\"coordinates\":[100.0,0.0]}";
    static final String NO_TYPE_LINE_STRING = "{\"coordinates\":[[100.0,0.0],[101.0,1.0]]}";
    static final String NOT_AN_OBJECT_LINE_STRING = "[\"type\",\"coordinates\"]";
    static final String INVALID_INNER_TYPE_LINE_STRING = "{\"type\":\"LineString\",\"coordinates\":[[100.0,3.0],[100.0,\"squid\"],[101.0,1.0]]}";
    static final String NO_COORDINATES_LINE_STRING = "{\"type\":\"LineString\"}";
    static final String COORDS_NOT_ARRAY_LINE_STRING = "{\"type\":\"LineString\",\"coordinates\":\"horse\"}";
    static final String COORDS_TOO_SHORT_LINE_STRING = "{\"type\":\"LineString\",\"coordinates\":[[101.0,1.0]]}";
    static final String LINEAR_RING = "{\"type\":\"LineString\",\"coordinates\":[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]}";

    // Multi Point strings
    static final String VALID_MULTIPOINT = "{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}";
    static final String WRONG_TYPE_MULTIPOINT = "{\"type\":\"Point\",\"coordinates\":[100.0,0.0]}";
    static final String NO_TYPE_MULTIPOINT = "{\"coordinates\":[[100.0,0.0],[101.0,1.0]]}";
    static final String NOT_AN_OBJECT_MULTIPOINT = "[\"type\",\"coordinates\"]";
    static final String INVALID_INNER_TYPE_MULTIPOINT = "{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,3.0],[100.0,\"squid\"],[101.0,1.0]]}";
    static final String NO_COORDINATES_MULTIPOINT = "{\"type\":\"MultiPoint\"}";
    static final String COORDS_NOT_ARRAY_MULTIPOINT = "{\"type\":\"MultiPoint\",\"coordinates\":\"horse\"}";
    static final String COORDS_TOO_SHORT_MULTIPOINT = "{\"type\":\"MultiPoint\",\"coordinates\":[[101.0,1.0]]}";

    // Point strings
    static final String VALID_POINT = "{\"type\":\"Point\",\"coordinates\":[100.0,0.0,90.0,90.0]}";
    static final String WRONG_TYPE_POINT = "{\"type\":\"MultiPoint\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}";
    static final String NO_TYPE_POINT = "{\"coordinates\":[100.0,0.0]}";
    static final String NOT_AN_OBJECT_POINT = "[\"type\",\"coordinates\"]";
    static final String INVALID_INNER_TYPE_POINT = "{\"type\":\"Point\",\"coordinates\":[100.0,\"squid\"]}";
    static final String NO_COORDINATES_POINT = "{\"type\":\"Point\"}";
    static final String COORDS_NOT_ARRAY_POINT = "{\"type\":\"Point\",\"coordinates\":\"horse\"}";
    static final String COORDS_TOO_SHORT_POINT = "{\"type\":\"Point\",\"coordinates\":[100.0]}";

    @BeforeClass
    public static void setUpTerraformer() {
        Terraformer.setEncoder(new GeoJson());
        Terraformer.setDecoder(new GeoJson());
    }

    @Test
    public void testDecode() throws Exception {
        // we are mostly verifying that the function discovers the type successfully
        GeoJson gj = new GeoJson();
        Point pt = (Point) gj.decode(VALID_POINT);
        MultiPoint mpt = (MultiPoint) gj.decode(VALID_MULTIPOINT);
        LineString ls = (LineString) gj.decode(VALID_LINE_STRING);
        LineString lr = (LineString) gj.decode(LINEAR_RING);
        MultiLineString mls = (MultiLineString) gj.decode(VALID_MULTI_LINE_STRING);
        Polygon pg = (Polygon) gj.decode(VALID_POLYGON);
        MultiPolygon mpg = (MultiPolygon) gj.decode(VALID_MULTI_POLYGON);
        GeometryCollection gc = (GeometryCollection) gj.decode(VALID_GEOMETRY_COLLECTION);
        Feature feat1 = (Feature) gj.decode(MULTILINESTRING_FEATURE);
        Feature feat2 = (Feature) gj.decode(POLYGON_FEATURE);
        Feature feat3 = (Feature) gj.decode(MULTIPOLYGON_FEATURE);
        Feature feat4 = (Feature) gj.decode(GEOMETRYCOLLECTION_FEATURE);
        FeatureCollection fc = (FeatureCollection) gj.decode(VALID_FEATURE_COLLECTION);

        boolean gotException = false;
        try {
            gj.decode(BAD_TYPE);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_UNKNOWN_TYPE));
            gotException = true;
        }
        assertTrue(gotException);
    }

    @Test
    public void testEncode() throws Exception {
        GeoJson gj = new GeoJson();
        // Feature Collection
        assertEquals(VALID_FEATURE_COLLECTION, gj.encode(FeatureCollectionTest.getFeatureCollection()));

        // Feature
        assertEquals(MULTILINESTRING_FEATURE, gj.encode(FeatureTest.getMultiLineStringFeature()));
        assertEquals(POLYGON_FEATURE, gj.encode(FeatureTest.getPolygonFeature()));
        assertEquals(MULTIPOLYGON_FEATURE, gj.encode(FeatureTest.getMultiPolygonFeature()));
        assertEquals(GEOMETRYCOLLECTION_FEATURE, gj.encode(FeatureTest.getGeometryCollectionFeature()));
        assertEquals(GEOMETRYCOLLECTION_FEATURE, gj.encode(new Feature(GeometryCollectionTest.getGeometryCollection(),
                FeatureTest.getProperties())));

        // Geometry Collection
        assertEquals(VALID_GEOMETRY_COLLECTION, gj.encode(GeometryCollectionTest.getGeometryCollection()));

        // Multi Polygon
        assertEquals(VALID_MULTI_POLYGON, gj.encode(MultiPolygonTest.getMultiPolygon()));

        // Polygon
        assertEquals(VALID_POLYGON, gj.encode(PolygonTest.getPolygon()));

        // Multi Line String
        assertEquals(VALID_MULTI_LINE_STRING, gj.encode(MultiLineStringTest.getMultiLineString()));

        // Line String
        assertEquals(VALID_LINE_STRING, gj.encode(LineStringTest.getLineString()));

        // Multi Point
        assertEquals(VALID_MULTIPOINT, gj.encode(MultiPointTest.getMultiPoint()));

        // Point
        assertEquals(VALID_POINT, gj.encode(PointTest.getPoint()));
    }

    @Test
    public void testGetType() throws Exception {
        assertEquals(null, GeoJson.getType(null));

        JsonObject typeless = Terraformer.getObject("{\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", "derp");
        assertEquals(null, GeoJson.getType(typeless));

        JsonObject numericType = Terraformer.getObject("{\"type\":5,\"coordinates\":[[100.0,0.0],[101.0,1.0]]}",
                                                        "derp");
        assertEquals(null, GeoJson.getType(numericType));

        JsonObject unknownType = Terraformer.getObject(
                "{\"type\":\"nknwn\",\"coordinates\":[[100.0,0.0],[101.0,1.0]]}", "derp");
        assertEquals(null, GeoJson.getType(unknownType));

        assertEquals(GeometryType.MULTIPOINT, GeoJson.getType(
                Terraformer.getObject(VALID_MULTIPOINT, "derp")));
    }

    @Test
    public void testGetCoordinates() throws Exception {
        boolean gotException = false;

        try {
            GeoJson.getCoordinates(Terraformer.getObject(NO_COORDINATES_MULTIPOINT, "derp"), "derp");
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);

        JsonObject obj = Terraformer.getObject(VALID_MULTIPOINT, "derp");
        assertNotEquals(null, GeoJson.getCoordinates(obj, "derp"));
    }

    @Test
    public void testGetCoordinateArray() throws Exception {
        boolean gotException = false;

        try {
            GeoJson.getCoordinateArray(GeoJson.getCoordinates(
                    Terraformer.getObject(COORDS_TOO_SHORT_MULTIPOINT, "derp"), "derp"), 2, "derp");
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_ARRAY_TOO_SHORT));
            gotException = true;
        }

        assertTrue(gotException);

        JsonElement elem = GeoJson.getCoordinates(Terraformer.getObject(VALID_MULTIPOINT, "derp"), "derp");
        assertNotEquals(null, GeoJson.getCoordinateArray(elem, 2, "derp"));
    }

    @Test
    public void testGeometryFromObjectElement() throws Exception {
        Point pt = (Point) GeoJson.geometryFromObjectElement(Terraformer.getElement(VALID_POINT, "derp"), "derp");
        MultiLineString mls = (MultiLineString) GeoJson.geometryFromObjectElement(
                Terraformer.getElement(VALID_MULTI_LINE_STRING, "derp"), "derp");
        GeometryCollection gc = (GeometryCollection) GeoJson.geometryFromObjectElement(
                Terraformer.getElement(VALID_GEOMETRY_COLLECTION, "derp"), "derp");

        boolean gotException = false;

        try {
            Polygon pg = (Polygon) GeoJson.geometryFromObjectElement(
                    Terraformer.getElement(POLYGON_FEATURE, "derp"), "derp");
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_GEOMETRY));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeometryCollection gc2 = (GeometryCollection) GeoJson.geometryFromObjectElement(
                    Terraformer.getElement(VALID_FEATURE_COLLECTION, "derp"), "derp");
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_GEOMETRY));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodeFeatureCollection() throws Exception {
        assertEquals(VALID_FEATURE_COLLECTION,
                GeoJson.decodeFeatureCollection(VALID_FEATURE_COLLECTION).encode());
        assertEquals(EMPTY_FEATURES_FEATURE_COLLECTION,
                GeoJson.decodeFeatureCollection(EMPTY_FEATURES_FEATURE_COLLECTION).encode());

        boolean gotException = false;

        try {
            GeoJson.decodeFeatureCollection(WRONG_TYPE_FEATURE_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeatureCollection(NO_TYPE_FEATURE_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeatureCollection(NOT_AN_OBJECT_FEATURE_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeatureCollection(INVALID_INNER_TYPE_FEATURE_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_ARRAY_TOO_SHORT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeatureCollection(NO_FEATURES_FEATURE_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.FEATURES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeatureCollection(FEATURES_NOT_ARRAY_FEATURE_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_ARRAY));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testFeatureFromObjectElement() throws Exception {
        Feature ft1 = GeoJson.featureFromObjectElement(Terraformer.getElement(MULTILINESTRING_FEATURE, "derp"), "derp");
        Feature ft2 = GeoJson.featureFromObjectElement(Terraformer.getElement(POLYGON_FEATURE, "derp"), "derp");
        Feature ft3 = GeoJson.featureFromObjectElement(Terraformer.getElement(MULTIPOLYGON_FEATURE, "derp"), "derp");
        Feature ft4 = GeoJson.featureFromObjectElement(Terraformer.getElement(GEOMETRYCOLLECTION_FEATURE, "derp"), "derp");

        boolean gotException = false;

        try {
            Feature ft5 = GeoJson.featureFromObjectElement(
                    Terraformer.getElement(VALID_MULTI_POLYGON, "derp"), "derp");
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_FEATURE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            Feature ft6 = GeoJson.featureFromObjectElement(
                    Terraformer.getElement(VALID_GEOMETRY_COLLECTION, "derp"), "derp");
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_FEATURE));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodeFeature() throws Exception {
        assertEquals(MULTILINESTRING_FEATURE, GeoJson.decodeFeature(MULTILINESTRING_FEATURE).encode());
        assertEquals(POLYGON_FEATURE, GeoJson.decodeFeature(POLYGON_FEATURE).encode());
        assertEquals(MULTIPOLYGON_FEATURE, GeoJson.decodeFeature(MULTIPOLYGON_FEATURE).encode());
        assertEquals(GEOMETRYCOLLECTION_FEATURE, GeoJson.decodeFeature(GEOMETRYCOLLECTION_FEATURE).encode());
        assertEquals(EMPTY_GEOMETRY_FEATURE, GeoJson.decodeFeature(EMPTY_GEOMETRY_FEATURE).encode());

        boolean gotException = false;

        try {
            GeoJson.decodeFeature(WRONG_TYPE_FEATURE);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeature(NO_TYPE_FEATURE);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeature(NOT_AN_OBJECT_FEATURE);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeature(INVALID_INNER_TYPE_FEATURE);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.INNER_LINESTRING_NOT_RING));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeature(NO_GEOMETRY_FEATURE);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.GEOMETRY_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeature(GEOMETRY_NOT_OBJECT_FEATURE);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_OBJECT));

            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeFeature(PROPERTIES_NOT_OBJECT_FEATURE);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.PROPERTIES_NOT_OBJECT));

            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodeGeometryCollection() throws Exception {
        assertEquals(VALID_GEOMETRY_COLLECTION,
                GeoJson.decodeGeometryCollection(VALID_GEOMETRY_COLLECTION).encode());
        assertEquals(EMPTY_GEOMETRIES_GEOMETRY_COLLECTION,
                GeoJson.decodeGeometryCollection(EMPTY_GEOMETRIES_GEOMETRY_COLLECTION).encode());

        boolean gotException = false;

        try {
            GeoJson.decodeGeometryCollection(WRONG_TYPE_GEOMETRY_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeGeometryCollection(NO_TYPE_GEOMETRY_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeGeometryCollection(NOT_AN_OBJECT_GEOMETRY_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeGeometryCollection(INVALID_INNER_TYPE_GEOMETRY_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.INNER_LINESTRING_NOT_RING));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeGeometryCollection(NO_GEOMETRIES_GEOMETRY_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.GEOMETRIES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeGeometryCollection(GEOMS_NOT_ARRAY_GEOMETRY_COLLECTION);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_ARRAY));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodeMultiPolygon() throws Exception {
        assertEquals(VALID_MULTI_POLYGON, GeoJson.decodeMultiPolygon(VALID_MULTI_POLYGON).encode());
        assertEquals(EMPTY_COORDS_MULTI_POLYGON, GeoJson.decodeMultiPolygon(EMPTY_COORDS_MULTI_POLYGON).encode());

        boolean gotException = false;

        try {
            GeoJson.decodeMultiPolygon(WRONG_TYPE_MULTI_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPolygon(NO_TYPE_MULTI_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPolygon(NOT_AN_OBJECT_MULTI_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPolygon(INVALID_INNER_TYPE_MULTI_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.INNER_LINESTRING_NOT_RING));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPolygon(NO_COORDINATES_MULTI_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPolygon(COORDS_NOT_ARRAY_MULTI_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_ARRAY));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodePolygon() throws Exception {
        assertEquals(VALID_POLYGON, GeoJson.decodePolygon(VALID_POLYGON).encode());
        assertEquals(EMPTY_COORDS_POLYGON, GeoJson.decodePolygon(EMPTY_COORDS_POLYGON).encode());

        boolean gotException = false;

        try {
            GeoJson.decodePolygon(WRONG_TYPE_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePolygon(NO_TYPE_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePolygon(NOT_AN_OBJECT_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePolygon(INVALID_INNER_TYPE_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.INNER_LINESTRING_NOT_RING));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePolygon(NO_COORDINATES_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePolygon(COORDS_NOT_ARRAY_POLYGON);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_ARRAY));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodeMultiLineString() throws Exception {
        assertEquals(VALID_MULTI_LINE_STRING, GeoJson.decodeMultiLineString(VALID_MULTI_LINE_STRING).encode());
        assertEquals(EMPTY_COORDS_MULTI_LINE_STRING, GeoJson.decodeMultiLineString(EMPTY_COORDS_MULTI_LINE_STRING).encode());

        boolean gotException = false;

        try {
            GeoJson.decodeMultiLineString(WRONG_TYPE_MULTI_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiLineString(NO_TYPE_MULTI_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiLineString(NOT_AN_OBJECT_MULTI_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiLineString(INVALID_INNER_TYPE_MULTI_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_NOT_NUMERIC));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiLineString(NO_COORDINATES_MULTI_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiLineString(COORDS_NOT_ARRAY_MULTI_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_ARRAY));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodeLineString() throws Exception {
        assertEquals(VALID_LINE_STRING, GeoJson.decodeLineString(VALID_LINE_STRING).encode());

        boolean gotException = false;

        try {
            GeoJson.decodeLineString(WRONG_TYPE_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeLineString(NO_TYPE_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeLineString(NOT_AN_OBJECT_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeLineString(INVALID_INNER_TYPE_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_NOT_NUMERIC));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeLineString(NO_COORDINATES_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeLineString(COORDS_NOT_ARRAY_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_ARRAY));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeLineString(COORDS_TOO_SHORT_LINE_STRING);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_ARRAY_TOO_SHORT));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodeMultiPoint() throws Exception {
        assertEquals(VALID_MULTIPOINT, GeoJson.decodeMultiPoint(VALID_MULTIPOINT).encode());

        boolean gotException = false;

        try {
            GeoJson.decodeMultiPoint(WRONG_TYPE_MULTIPOINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPoint(NO_TYPE_MULTIPOINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPoint(NOT_AN_OBJECT_MULTIPOINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPoint(INVALID_INNER_TYPE_MULTIPOINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_NOT_NUMERIC));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPoint(NO_COORDINATES_MULTIPOINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPoint(COORDS_NOT_ARRAY_MULTIPOINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_ARRAY));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodeMultiPoint(COORDS_TOO_SHORT_MULTIPOINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_ARRAY_TOO_SHORT));
            gotException = true;
        }

        assertTrue(gotException);
    }

    @Test
    public void testDecodePoint() throws Exception {
        assertEquals(VALID_POINT, GeoJson.decodePoint(VALID_POINT).encode());

        boolean gotException = false;

        try {
            GeoJson.decodePoint(WRONG_TYPE_POINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePoint(NO_TYPE_POINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_OF_TYPE));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePoint(NOT_AN_OBJECT_POINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.NOT_A_JSON_OBJECT));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePoint(INVALID_INNER_TYPE_POINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_NOT_NUMERIC));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePoint(NO_COORDINATES_POINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATES_KEY_NOT_FOUND));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePoint(COORDS_NOT_ARRAY_POINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.ELEMENT_NOT_ARRAY));
            gotException = true;
        }

        assertTrue(gotException);
        gotException = false;

        try {
            GeoJson.decodePoint(COORDS_TOO_SHORT_POINT);
        } catch (TerraformerException e) {
            assertTrue(e.getMessage().contains(TerraformerException.COORDINATE_ARRAY_TOO_SHORT));
            gotException = true;
        }

        assertTrue(gotException);
    }
}
